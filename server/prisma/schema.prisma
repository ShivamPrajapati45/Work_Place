generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String
  username         String?  @unique
  fullName         String?
  description      String?
  profileImage     String?
  isProfileInfoSet Boolean? @default(false)
  createdAt        DateTime @default(now())

  location         String?
  portfolioLink    String?
  skills           String[]
  socialLinks      String[]
  profession       String?
  experienceLevel  String?
  languages        String[]

  hourlyRate       Float?
  availability     String?
  responseTime     String?
  lastActive       DateTime? // auto updated on login
  profileCompletion Int?
  phoneNumber      String? @unique

  gigs             Gigs[]
  reviews          Reviews[]
  orders           Orders[]
  notifications    Notifications[]
  messagesSent     Messages[] @relation("sentMessages")
  messagesReceived Messages[] @relation("receivedMessages")
  conversations    Conversation[] @relation("ConversationParticipants")
}

model Gigs {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  category     String
  deliveryTime Int
  revisions    Int
  features     String[]
  price        Float
  shortDesc    String
  createdAt    DateTime @default(now())
  images       String[]
  cloudImages String[]
  createdBy    User     @relation(fields: [userId], references: [id])
  userId       Int
  orders Orders[]
  reviews Reviews[]
}

model Orders {
  id Int @id @default(autoincrement())
  fullName String? // buyer full name
  transactionId String?
  createdAt DateTime @default(now())
  buyer User @relation(fields: [buyerId],references: [id])
  buyerId Int
  gig Gigs @relation(fields: [gigId],references: [id])
  gigId Int
  price Int                           // total price of the gig
  upfrontPayment Float @default(0)
  remainingAmount Float @default(0)
  paidAmount Int @default(0)           // Tracks how much has been paid so far
  status String @default("Pending")
  inCompleted Boolean @default(false)  // this is isCompleted but by typing error it become inCompleted
  inDispute Boolean @default(false)    // tracks if the order is in dispute
  messages Messages[]
  payments payments[]
}

model payments{
  id Int @id @default(autoincrement())
  transactionId String?
  order Orders @relation(fields: [orderId], references: [id])
  orderId Int
  amount Float
  paymentDate DateTime @default(now())
  paymentMethod String @default("Card")
  status String
}

model Reviews {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  rating Int
  reviewText String?
  gig Gigs @relation(fields: [gigId], references: [id])
  gigId Int
  reviewer User @relation(fields: [reviewerId], references: [id])
  reviewerId Int
}

model Messages {
  id Int @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  isRead Boolean @default(false)
  senderId Int
  recipientId Int
  orderId Int
  conversationId Int
  sender User @relation("sentMessages", fields: [senderId],references: [id])
  recipient User @relation("receivedMessages",fields: [recipientId],references: [id])
  order Orders @relation(fields: [orderId], references: [id])
  conversation Conversation @relation("ConversationMessages",fields: [conversationId], references: [id])
}

model Conversation {
  id Int @id @default(autoincrement())
  participants User[] @relation("ConversationParticipants")
  messages Messages[] @relation("ConversationMessages")
  createdAt DateTime @default(now())
}

model Notifications {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  message String
  sellerId Int 
  user User @relation(fields: [sellerId], references: [id])
  read Boolean @default(false) // Tracks notification read or not

}